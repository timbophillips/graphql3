# source: http://localhost:8080/v1/graphql
# timestamp: Tue May 05 2020 13:13:15 GMT+0800 (Australian Western Standard Time)

schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
columns and relationships of "cases"
"""
type cases {
  id: Int!

  """An object relationship"""
  name: names!
  patient_id: Int!
}

"""
aggregated selection of "cases"
"""
type cases_aggregate {
  aggregate: cases_aggregate_fields
  nodes: [cases!]!
}

"""
aggregate fields of "cases"
"""
type cases_aggregate_fields {
  avg: cases_avg_fields
  count(columns: [cases_select_column!], distinct: Boolean): Int
  max: cases_max_fields
  min: cases_min_fields
  stddev: cases_stddev_fields
  stddev_pop: cases_stddev_pop_fields
  stddev_samp: cases_stddev_samp_fields
  sum: cases_sum_fields
  var_pop: cases_var_pop_fields
  var_samp: cases_var_samp_fields
  variance: cases_variance_fields
}

"""
order by aggregate values of table "cases"
"""
input cases_aggregate_order_by {
  avg: cases_avg_order_by
  count: order_by
  max: cases_max_order_by
  min: cases_min_order_by
  stddev: cases_stddev_order_by
  stddev_pop: cases_stddev_pop_order_by
  stddev_samp: cases_stddev_samp_order_by
  sum: cases_sum_order_by
  var_pop: cases_var_pop_order_by
  var_samp: cases_var_samp_order_by
  variance: cases_variance_order_by
}

"""
input type for inserting array relation for remote table "cases"
"""
input cases_arr_rel_insert_input {
  data: [cases_insert_input!]!
  on_conflict: cases_on_conflict
}

"""aggregate avg on columns"""
type cases_avg_fields {
  id: Float
  patient_id: Float
}

"""
order by avg() on columns of table "cases"
"""
input cases_avg_order_by {
  id: order_by
  patient_id: order_by
}

"""
Boolean expression to filter rows from the table "cases". All fields are combined with a logical 'AND'.
"""
input cases_bool_exp {
  _and: [cases_bool_exp]
  _not: cases_bool_exp
  _or: [cases_bool_exp]
  id: Int_comparison_exp
  name: names_bool_exp
  patient_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "cases"
"""
enum cases_constraint {
  """unique or primary key constraint"""
  cases_pkey
}

"""
input type for incrementing integer column in table "cases"
"""
input cases_inc_input {
  id: Int
  patient_id: Int
}

"""
input type for inserting data into table "cases"
"""
input cases_insert_input {
  id: Int
  name: names_obj_rel_insert_input
  patient_id: Int
}

"""aggregate max on columns"""
type cases_max_fields {
  id: Int
  patient_id: Int
}

"""
order by max() on columns of table "cases"
"""
input cases_max_order_by {
  id: order_by
  patient_id: order_by
}

"""aggregate min on columns"""
type cases_min_fields {
  id: Int
  patient_id: Int
}

"""
order by min() on columns of table "cases"
"""
input cases_min_order_by {
  id: order_by
  patient_id: order_by
}

"""
response of any mutation on the table "cases"
"""
type cases_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [cases!]!
}

"""
input type for inserting object relation for remote table "cases"
"""
input cases_obj_rel_insert_input {
  data: cases_insert_input!
  on_conflict: cases_on_conflict
}

"""
on conflict condition type for table "cases"
"""
input cases_on_conflict {
  constraint: cases_constraint!
  update_columns: [cases_update_column!]!
  where: cases_bool_exp
}

"""
ordering options when selecting data from "cases"
"""
input cases_order_by {
  id: order_by
  name: names_order_by
  patient_id: order_by
}

"""
primary key columns input for table: "cases"
"""
input cases_pk_columns_input {
  id: Int!
}

"""
select columns of table "cases"
"""
enum cases_select_column {
  """column name"""
  id

  """column name"""
  patient_id
}

"""
input type for updating data in table "cases"
"""
input cases_set_input {
  id: Int
  patient_id: Int
}

"""aggregate stddev on columns"""
type cases_stddev_fields {
  id: Float
  patient_id: Float
}

"""
order by stddev() on columns of table "cases"
"""
input cases_stddev_order_by {
  id: order_by
  patient_id: order_by
}

"""aggregate stddev_pop on columns"""
type cases_stddev_pop_fields {
  id: Float
  patient_id: Float
}

"""
order by stddev_pop() on columns of table "cases"
"""
input cases_stddev_pop_order_by {
  id: order_by
  patient_id: order_by
}

"""aggregate stddev_samp on columns"""
type cases_stddev_samp_fields {
  id: Float
  patient_id: Float
}

"""
order by stddev_samp() on columns of table "cases"
"""
input cases_stddev_samp_order_by {
  id: order_by
  patient_id: order_by
}

"""aggregate sum on columns"""
type cases_sum_fields {
  id: Int
  patient_id: Int
}

"""
order by sum() on columns of table "cases"
"""
input cases_sum_order_by {
  id: order_by
  patient_id: order_by
}

"""
update columns of table "cases"
"""
enum cases_update_column {
  """column name"""
  id

  """column name"""
  patient_id
}

"""aggregate var_pop on columns"""
type cases_var_pop_fields {
  id: Float
  patient_id: Float
}

"""
order by var_pop() on columns of table "cases"
"""
input cases_var_pop_order_by {
  id: order_by
  patient_id: order_by
}

"""aggregate var_samp on columns"""
type cases_var_samp_fields {
  id: Float
  patient_id: Float
}

"""
order by var_samp() on columns of table "cases"
"""
input cases_var_samp_order_by {
  id: order_by
  patient_id: order_by
}

"""aggregate variance on columns"""
type cases_variance_fields {
  id: Float
  patient_id: Float
}

"""
order by variance() on columns of table "cases"
"""
input cases_variance_order_by {
  id: order_by
  patient_id: order_by
}

"""
columns and relationships of "disease"
"""
type disease {
  description: String!
  id: Int!

  """An array relationship"""
  names(
    """distinct select on columns"""
    distinct_on: [names_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [names_order_by!]

    """filter the rows returned"""
    where: names_bool_exp
  ): [names!]!

  """An aggregated array relationship"""
  names_aggregate(
    """distinct select on columns"""
    distinct_on: [names_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [names_order_by!]

    """filter the rows returned"""
    where: names_bool_exp
  ): names_aggregate!
}

"""
aggregated selection of "disease"
"""
type disease_aggregate {
  aggregate: disease_aggregate_fields
  nodes: [disease!]!
}

"""
aggregate fields of "disease"
"""
type disease_aggregate_fields {
  avg: disease_avg_fields
  count(columns: [disease_select_column!], distinct: Boolean): Int
  max: disease_max_fields
  min: disease_min_fields
  stddev: disease_stddev_fields
  stddev_pop: disease_stddev_pop_fields
  stddev_samp: disease_stddev_samp_fields
  sum: disease_sum_fields
  var_pop: disease_var_pop_fields
  var_samp: disease_var_samp_fields
  variance: disease_variance_fields
}

"""
order by aggregate values of table "disease"
"""
input disease_aggregate_order_by {
  avg: disease_avg_order_by
  count: order_by
  max: disease_max_order_by
  min: disease_min_order_by
  stddev: disease_stddev_order_by
  stddev_pop: disease_stddev_pop_order_by
  stddev_samp: disease_stddev_samp_order_by
  sum: disease_sum_order_by
  var_pop: disease_var_pop_order_by
  var_samp: disease_var_samp_order_by
  variance: disease_variance_order_by
}

"""
input type for inserting array relation for remote table "disease"
"""
input disease_arr_rel_insert_input {
  data: [disease_insert_input!]!
  on_conflict: disease_on_conflict
}

"""aggregate avg on columns"""
type disease_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "disease"
"""
input disease_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "disease". All fields are combined with a logical 'AND'.
"""
input disease_bool_exp {
  _and: [disease_bool_exp]
  _not: disease_bool_exp
  _or: [disease_bool_exp]
  description: String_comparison_exp
  id: Int_comparison_exp
  names: names_bool_exp
}

"""
unique or primary key constraints on table "disease"
"""
enum disease_constraint {
  """unique or primary key constraint"""
  disease_disease_key

  """unique or primary key constraint"""
  disease_pkey
}

"""
input type for incrementing integer column in table "disease"
"""
input disease_inc_input {
  id: Int
}

"""
input type for inserting data into table "disease"
"""
input disease_insert_input {
  description: String
  id: Int
  names: names_arr_rel_insert_input
}

"""aggregate max on columns"""
type disease_max_fields {
  description: String
  id: Int
}

"""
order by max() on columns of table "disease"
"""
input disease_max_order_by {
  description: order_by
  id: order_by
}

"""aggregate min on columns"""
type disease_min_fields {
  description: String
  id: Int
}

"""
order by min() on columns of table "disease"
"""
input disease_min_order_by {
  description: order_by
  id: order_by
}

"""
response of any mutation on the table "disease"
"""
type disease_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [disease!]!
}

"""
input type for inserting object relation for remote table "disease"
"""
input disease_obj_rel_insert_input {
  data: disease_insert_input!
  on_conflict: disease_on_conflict
}

"""
on conflict condition type for table "disease"
"""
input disease_on_conflict {
  constraint: disease_constraint!
  update_columns: [disease_update_column!]!
  where: disease_bool_exp
}

"""
ordering options when selecting data from "disease"
"""
input disease_order_by {
  description: order_by
  id: order_by
  names_aggregate: names_aggregate_order_by
}

"""
primary key columns input for table: "disease"
"""
input disease_pk_columns_input {
  id: Int!
}

"""
select columns of table "disease"
"""
enum disease_select_column {
  """column name"""
  description

  """column name"""
  id
}

"""
input type for updating data in table "disease"
"""
input disease_set_input {
  description: String
  id: Int
}

"""aggregate stddev on columns"""
type disease_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "disease"
"""
input disease_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type disease_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "disease"
"""
input disease_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type disease_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "disease"
"""
input disease_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type disease_sum_fields {
  id: Int
}

"""
order by sum() on columns of table "disease"
"""
input disease_sum_order_by {
  id: order_by
}

"""
update columns of table "disease"
"""
enum disease_update_column {
  """column name"""
  description

  """column name"""
  id
}

"""aggregate var_pop on columns"""
type disease_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "disease"
"""
input disease_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type disease_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "disease"
"""
input disease_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type disease_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "disease"
"""
input disease_variance_order_by {
  id: order_by
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "cases"
  """
  delete_cases(
    """filter the rows which have to be deleted"""
    where: cases_bool_exp!
  ): cases_mutation_response

  """
  delete single row from the table: "cases"
  """
  delete_cases_by_pk(id: Int!): cases

  """
  delete data from the table: "disease"
  """
  delete_disease(
    """filter the rows which have to be deleted"""
    where: disease_bool_exp!
  ): disease_mutation_response

  """
  delete single row from the table: "disease"
  """
  delete_disease_by_pk(id: Int!): disease

  """
  delete data from the table: "names"
  """
  delete_names(
    """filter the rows which have to be deleted"""
    where: names_bool_exp!
  ): names_mutation_response

  """
  delete single row from the table: "names"
  """
  delete_names_by_pk(id: Int!): names

  """
  delete data from the table: "operations"
  """
  delete_operations(
    """filter the rows which have to be deleted"""
    where: operations_bool_exp!
  ): operations_mutation_response

  """
  delete single row from the table: "operations"
  """
  delete_operations_by_pk(id: Int!): operations

  """
  delete data from the table: "procedures"
  """
  delete_procedures(
    """filter the rows which have to be deleted"""
    where: procedures_bool_exp!
  ): procedures_mutation_response

  """
  delete single row from the table: "procedures"
  """
  delete_procedures_by_pk(id: Int!): procedures

  """
  insert data into the table: "cases"
  """
  insert_cases(
    """the rows to be inserted"""
    objects: [cases_insert_input!]!

    """on conflict condition"""
    on_conflict: cases_on_conflict
  ): cases_mutation_response

  """
  insert a single row into the table: "cases"
  """
  insert_cases_one(
    """the row to be inserted"""
    object: cases_insert_input!

    """on conflict condition"""
    on_conflict: cases_on_conflict
  ): cases

  """
  insert data into the table: "disease"
  """
  insert_disease(
    """the rows to be inserted"""
    objects: [disease_insert_input!]!

    """on conflict condition"""
    on_conflict: disease_on_conflict
  ): disease_mutation_response

  """
  insert a single row into the table: "disease"
  """
  insert_disease_one(
    """the row to be inserted"""
    object: disease_insert_input!

    """on conflict condition"""
    on_conflict: disease_on_conflict
  ): disease

  """
  insert data into the table: "names"
  """
  insert_names(
    """the rows to be inserted"""
    objects: [names_insert_input!]!

    """on conflict condition"""
    on_conflict: names_on_conflict
  ): names_mutation_response

  """
  insert a single row into the table: "names"
  """
  insert_names_one(
    """the row to be inserted"""
    object: names_insert_input!

    """on conflict condition"""
    on_conflict: names_on_conflict
  ): names

  """
  insert data into the table: "operations"
  """
  insert_operations(
    """the rows to be inserted"""
    objects: [operations_insert_input!]!

    """on conflict condition"""
    on_conflict: operations_on_conflict
  ): operations_mutation_response

  """
  insert a single row into the table: "operations"
  """
  insert_operations_one(
    """the row to be inserted"""
    object: operations_insert_input!

    """on conflict condition"""
    on_conflict: operations_on_conflict
  ): operations

  """
  insert data into the table: "procedures"
  """
  insert_procedures(
    """the rows to be inserted"""
    objects: [procedures_insert_input!]!

    """on conflict condition"""
    on_conflict: procedures_on_conflict
  ): procedures_mutation_response

  """
  insert a single row into the table: "procedures"
  """
  insert_procedures_one(
    """the row to be inserted"""
    object: procedures_insert_input!

    """on conflict condition"""
    on_conflict: procedures_on_conflict
  ): procedures

  """
  update data of the table: "cases"
  """
  update_cases(
    """increments the integer columns with given value of the filtered values"""
    _inc: cases_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: cases_set_input

    """filter the rows which have to be updated"""
    where: cases_bool_exp!
  ): cases_mutation_response

  """
  update single row of the table: "cases"
  """
  update_cases_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: cases_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: cases_set_input
    pk_columns: cases_pk_columns_input!
  ): cases

  """
  update data of the table: "disease"
  """
  update_disease(
    """increments the integer columns with given value of the filtered values"""
    _inc: disease_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: disease_set_input

    """filter the rows which have to be updated"""
    where: disease_bool_exp!
  ): disease_mutation_response

  """
  update single row of the table: "disease"
  """
  update_disease_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: disease_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: disease_set_input
    pk_columns: disease_pk_columns_input!
  ): disease

  """
  update data of the table: "names"
  """
  update_names(
    """increments the integer columns with given value of the filtered values"""
    _inc: names_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: names_set_input

    """filter the rows which have to be updated"""
    where: names_bool_exp!
  ): names_mutation_response

  """
  update single row of the table: "names"
  """
  update_names_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: names_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: names_set_input
    pk_columns: names_pk_columns_input!
  ): names

  """
  update data of the table: "operations"
  """
  update_operations(
    """increments the integer columns with given value of the filtered values"""
    _inc: operations_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: operations_set_input

    """filter the rows which have to be updated"""
    where: operations_bool_exp!
  ): operations_mutation_response

  """
  update single row of the table: "operations"
  """
  update_operations_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: operations_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: operations_set_input
    pk_columns: operations_pk_columns_input!
  ): operations

  """
  update data of the table: "procedures"
  """
  update_procedures(
    """increments the integer columns with given value of the filtered values"""
    _inc: procedures_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: procedures_set_input

    """filter the rows which have to be updated"""
    where: procedures_bool_exp!
  ): procedures_mutation_response

  """
  update single row of the table: "procedures"
  """
  update_procedures_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: procedures_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: procedures_set_input
    pk_columns: procedures_pk_columns_input!
  ): procedures
}

"""
columns and relationships of "names"
"""
type names {
  """An array relationship"""
  cases(
    """distinct select on columns"""
    distinct_on: [cases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cases_order_by!]

    """filter the rows returned"""
    where: cases_bool_exp
  ): [cases!]!

  """An aggregated array relationship"""
  cases_aggregate(
    """distinct select on columns"""
    distinct_on: [cases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cases_order_by!]

    """filter the rows returned"""
    where: cases_bool_exp
  ): cases_aggregate!
  color: String

  """An object relationship"""
  disease: disease
  disease_id: Int
  id: Int!
  name: String!
  number: Int
}

"""
aggregated selection of "names"
"""
type names_aggregate {
  aggregate: names_aggregate_fields
  nodes: [names!]!
}

"""
aggregate fields of "names"
"""
type names_aggregate_fields {
  avg: names_avg_fields
  count(columns: [names_select_column!], distinct: Boolean): Int
  max: names_max_fields
  min: names_min_fields
  stddev: names_stddev_fields
  stddev_pop: names_stddev_pop_fields
  stddev_samp: names_stddev_samp_fields
  sum: names_sum_fields
  var_pop: names_var_pop_fields
  var_samp: names_var_samp_fields
  variance: names_variance_fields
}

"""
order by aggregate values of table "names"
"""
input names_aggregate_order_by {
  avg: names_avg_order_by
  count: order_by
  max: names_max_order_by
  min: names_min_order_by
  stddev: names_stddev_order_by
  stddev_pop: names_stddev_pop_order_by
  stddev_samp: names_stddev_samp_order_by
  sum: names_sum_order_by
  var_pop: names_var_pop_order_by
  var_samp: names_var_samp_order_by
  variance: names_variance_order_by
}

"""
input type for inserting array relation for remote table "names"
"""
input names_arr_rel_insert_input {
  data: [names_insert_input!]!
  on_conflict: names_on_conflict
}

"""aggregate avg on columns"""
type names_avg_fields {
  disease_id: Float
  id: Float
  number: Float
}

"""
order by avg() on columns of table "names"
"""
input names_avg_order_by {
  disease_id: order_by
  id: order_by
  number: order_by
}

"""
Boolean expression to filter rows from the table "names". All fields are combined with a logical 'AND'.
"""
input names_bool_exp {
  _and: [names_bool_exp]
  _not: names_bool_exp
  _or: [names_bool_exp]
  cases: cases_bool_exp
  color: String_comparison_exp
  disease: disease_bool_exp
  disease_id: Int_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  number: Int_comparison_exp
}

"""
unique or primary key constraints on table "names"
"""
enum names_constraint {
  """unique or primary key constraint"""
  names_pkey
}

"""
input type for incrementing integer column in table "names"
"""
input names_inc_input {
  disease_id: Int
  id: Int
  number: Int
}

"""
input type for inserting data into table "names"
"""
input names_insert_input {
  cases: cases_arr_rel_insert_input
  color: String
  disease: disease_obj_rel_insert_input
  disease_id: Int
  id: Int
  name: String
  number: Int
}

"""aggregate max on columns"""
type names_max_fields {
  color: String
  disease_id: Int
  id: Int
  name: String
  number: Int
}

"""
order by max() on columns of table "names"
"""
input names_max_order_by {
  color: order_by
  disease_id: order_by
  id: order_by
  name: order_by
  number: order_by
}

"""aggregate min on columns"""
type names_min_fields {
  color: String
  disease_id: Int
  id: Int
  name: String
  number: Int
}

"""
order by min() on columns of table "names"
"""
input names_min_order_by {
  color: order_by
  disease_id: order_by
  id: order_by
  name: order_by
  number: order_by
}

"""
response of any mutation on the table "names"
"""
type names_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [names!]!
}

"""
input type for inserting object relation for remote table "names"
"""
input names_obj_rel_insert_input {
  data: names_insert_input!
  on_conflict: names_on_conflict
}

"""
on conflict condition type for table "names"
"""
input names_on_conflict {
  constraint: names_constraint!
  update_columns: [names_update_column!]!
  where: names_bool_exp
}

"""
ordering options when selecting data from "names"
"""
input names_order_by {
  cases_aggregate: cases_aggregate_order_by
  color: order_by
  disease: disease_order_by
  disease_id: order_by
  id: order_by
  name: order_by
  number: order_by
}

"""
primary key columns input for table: "names"
"""
input names_pk_columns_input {
  id: Int!
}

"""
select columns of table "names"
"""
enum names_select_column {
  """column name"""
  color

  """column name"""
  disease_id

  """column name"""
  id

  """column name"""
  name

  """column name"""
  number
}

"""
input type for updating data in table "names"
"""
input names_set_input {
  color: String
  disease_id: Int
  id: Int
  name: String
  number: Int
}

"""aggregate stddev on columns"""
type names_stddev_fields {
  disease_id: Float
  id: Float
  number: Float
}

"""
order by stddev() on columns of table "names"
"""
input names_stddev_order_by {
  disease_id: order_by
  id: order_by
  number: order_by
}

"""aggregate stddev_pop on columns"""
type names_stddev_pop_fields {
  disease_id: Float
  id: Float
  number: Float
}

"""
order by stddev_pop() on columns of table "names"
"""
input names_stddev_pop_order_by {
  disease_id: order_by
  id: order_by
  number: order_by
}

"""aggregate stddev_samp on columns"""
type names_stddev_samp_fields {
  disease_id: Float
  id: Float
  number: Float
}

"""
order by stddev_samp() on columns of table "names"
"""
input names_stddev_samp_order_by {
  disease_id: order_by
  id: order_by
  number: order_by
}

"""aggregate sum on columns"""
type names_sum_fields {
  disease_id: Int
  id: Int
  number: Int
}

"""
order by sum() on columns of table "names"
"""
input names_sum_order_by {
  disease_id: order_by
  id: order_by
  number: order_by
}

"""
update columns of table "names"
"""
enum names_update_column {
  """column name"""
  color

  """column name"""
  disease_id

  """column name"""
  id

  """column name"""
  name

  """column name"""
  number
}

"""aggregate var_pop on columns"""
type names_var_pop_fields {
  disease_id: Float
  id: Float
  number: Float
}

"""
order by var_pop() on columns of table "names"
"""
input names_var_pop_order_by {
  disease_id: order_by
  id: order_by
  number: order_by
}

"""aggregate var_samp on columns"""
type names_var_samp_fields {
  disease_id: Float
  id: Float
  number: Float
}

"""
order by var_samp() on columns of table "names"
"""
input names_var_samp_order_by {
  disease_id: order_by
  id: order_by
  number: order_by
}

"""aggregate variance on columns"""
type names_variance_fields {
  disease_id: Float
  id: Float
  number: Float
}

"""
order by variance() on columns of table "names"
"""
input names_variance_order_by {
  disease_id: order_by
  id: order_by
  number: order_by
}

"""
columns and relationships of "operations"
"""
type operations {
  description: String!
  id: Int!
}

"""
aggregated selection of "operations"
"""
type operations_aggregate {
  aggregate: operations_aggregate_fields
  nodes: [operations!]!
}

"""
aggregate fields of "operations"
"""
type operations_aggregate_fields {
  avg: operations_avg_fields
  count(columns: [operations_select_column!], distinct: Boolean): Int
  max: operations_max_fields
  min: operations_min_fields
  stddev: operations_stddev_fields
  stddev_pop: operations_stddev_pop_fields
  stddev_samp: operations_stddev_samp_fields
  sum: operations_sum_fields
  var_pop: operations_var_pop_fields
  var_samp: operations_var_samp_fields
  variance: operations_variance_fields
}

"""
order by aggregate values of table "operations"
"""
input operations_aggregate_order_by {
  avg: operations_avg_order_by
  count: order_by
  max: operations_max_order_by
  min: operations_min_order_by
  stddev: operations_stddev_order_by
  stddev_pop: operations_stddev_pop_order_by
  stddev_samp: operations_stddev_samp_order_by
  sum: operations_sum_order_by
  var_pop: operations_var_pop_order_by
  var_samp: operations_var_samp_order_by
  variance: operations_variance_order_by
}

"""
input type for inserting array relation for remote table "operations"
"""
input operations_arr_rel_insert_input {
  data: [operations_insert_input!]!
  on_conflict: operations_on_conflict
}

"""aggregate avg on columns"""
type operations_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "operations"
"""
input operations_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "operations". All fields are combined with a logical 'AND'.
"""
input operations_bool_exp {
  _and: [operations_bool_exp]
  _not: operations_bool_exp
  _or: [operations_bool_exp]
  description: String_comparison_exp
  id: Int_comparison_exp
}

"""
unique or primary key constraints on table "operations"
"""
enum operations_constraint {
  """unique or primary key constraint"""
  operations_pkey
}

"""
input type for incrementing integer column in table "operations"
"""
input operations_inc_input {
  id: Int
}

"""
input type for inserting data into table "operations"
"""
input operations_insert_input {
  description: String
  id: Int
}

"""aggregate max on columns"""
type operations_max_fields {
  description: String
  id: Int
}

"""
order by max() on columns of table "operations"
"""
input operations_max_order_by {
  description: order_by
  id: order_by
}

"""aggregate min on columns"""
type operations_min_fields {
  description: String
  id: Int
}

"""
order by min() on columns of table "operations"
"""
input operations_min_order_by {
  description: order_by
  id: order_by
}

"""
response of any mutation on the table "operations"
"""
type operations_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [operations!]!
}

"""
input type for inserting object relation for remote table "operations"
"""
input operations_obj_rel_insert_input {
  data: operations_insert_input!
  on_conflict: operations_on_conflict
}

"""
on conflict condition type for table "operations"
"""
input operations_on_conflict {
  constraint: operations_constraint!
  update_columns: [operations_update_column!]!
  where: operations_bool_exp
}

"""
ordering options when selecting data from "operations"
"""
input operations_order_by {
  description: order_by
  id: order_by
}

"""
primary key columns input for table: "operations"
"""
input operations_pk_columns_input {
  id: Int!
}

"""
select columns of table "operations"
"""
enum operations_select_column {
  """column name"""
  description

  """column name"""
  id
}

"""
input type for updating data in table "operations"
"""
input operations_set_input {
  description: String
  id: Int
}

"""aggregate stddev on columns"""
type operations_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "operations"
"""
input operations_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type operations_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "operations"
"""
input operations_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type operations_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "operations"
"""
input operations_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type operations_sum_fields {
  id: Int
}

"""
order by sum() on columns of table "operations"
"""
input operations_sum_order_by {
  id: order_by
}

"""
update columns of table "operations"
"""
enum operations_update_column {
  """column name"""
  description

  """column name"""
  id
}

"""aggregate var_pop on columns"""
type operations_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "operations"
"""
input operations_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type operations_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "operations"
"""
input operations_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type operations_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "operations"
"""
input operations_variance_order_by {
  id: order_by
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "procedures"
"""
type procedures {
  group: String
  id: Int!
  text: String!
}

"""
aggregated selection of "procedures"
"""
type procedures_aggregate {
  aggregate: procedures_aggregate_fields
  nodes: [procedures!]!
}

"""
aggregate fields of "procedures"
"""
type procedures_aggregate_fields {
  avg: procedures_avg_fields
  count(columns: [procedures_select_column!], distinct: Boolean): Int
  max: procedures_max_fields
  min: procedures_min_fields
  stddev: procedures_stddev_fields
  stddev_pop: procedures_stddev_pop_fields
  stddev_samp: procedures_stddev_samp_fields
  sum: procedures_sum_fields
  var_pop: procedures_var_pop_fields
  var_samp: procedures_var_samp_fields
  variance: procedures_variance_fields
}

"""
order by aggregate values of table "procedures"
"""
input procedures_aggregate_order_by {
  avg: procedures_avg_order_by
  count: order_by
  max: procedures_max_order_by
  min: procedures_min_order_by
  stddev: procedures_stddev_order_by
  stddev_pop: procedures_stddev_pop_order_by
  stddev_samp: procedures_stddev_samp_order_by
  sum: procedures_sum_order_by
  var_pop: procedures_var_pop_order_by
  var_samp: procedures_var_samp_order_by
  variance: procedures_variance_order_by
}

"""
input type for inserting array relation for remote table "procedures"
"""
input procedures_arr_rel_insert_input {
  data: [procedures_insert_input!]!
  on_conflict: procedures_on_conflict
}

"""aggregate avg on columns"""
type procedures_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "procedures"
"""
input procedures_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "procedures". All fields are combined with a logical 'AND'.
"""
input procedures_bool_exp {
  _and: [procedures_bool_exp]
  _not: procedures_bool_exp
  _or: [procedures_bool_exp]
  group: String_comparison_exp
  id: Int_comparison_exp
  text: String_comparison_exp
}

"""
unique or primary key constraints on table "procedures"
"""
enum procedures_constraint {
  """unique or primary key constraint"""
  procedures_pkey
}

"""
input type for incrementing integer column in table "procedures"
"""
input procedures_inc_input {
  id: Int
}

"""
input type for inserting data into table "procedures"
"""
input procedures_insert_input {
  group: String
  id: Int
  text: String
}

"""aggregate max on columns"""
type procedures_max_fields {
  group: String
  id: Int
  text: String
}

"""
order by max() on columns of table "procedures"
"""
input procedures_max_order_by {
  group: order_by
  id: order_by
  text: order_by
}

"""aggregate min on columns"""
type procedures_min_fields {
  group: String
  id: Int
  text: String
}

"""
order by min() on columns of table "procedures"
"""
input procedures_min_order_by {
  group: order_by
  id: order_by
  text: order_by
}

"""
response of any mutation on the table "procedures"
"""
type procedures_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [procedures!]!
}

"""
input type for inserting object relation for remote table "procedures"
"""
input procedures_obj_rel_insert_input {
  data: procedures_insert_input!
  on_conflict: procedures_on_conflict
}

"""
on conflict condition type for table "procedures"
"""
input procedures_on_conflict {
  constraint: procedures_constraint!
  update_columns: [procedures_update_column!]!
  where: procedures_bool_exp
}

"""
ordering options when selecting data from "procedures"
"""
input procedures_order_by {
  group: order_by
  id: order_by
  text: order_by
}

"""
primary key columns input for table: "procedures"
"""
input procedures_pk_columns_input {
  id: Int!
}

"""
select columns of table "procedures"
"""
enum procedures_select_column {
  """column name"""
  group

  """column name"""
  id

  """column name"""
  text
}

"""
input type for updating data in table "procedures"
"""
input procedures_set_input {
  group: String
  id: Int
  text: String
}

"""aggregate stddev on columns"""
type procedures_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "procedures"
"""
input procedures_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type procedures_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "procedures"
"""
input procedures_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type procedures_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "procedures"
"""
input procedures_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type procedures_sum_fields {
  id: Int
}

"""
order by sum() on columns of table "procedures"
"""
input procedures_sum_order_by {
  id: order_by
}

"""
update columns of table "procedures"
"""
enum procedures_update_column {
  """column name"""
  group

  """column name"""
  id

  """column name"""
  text
}

"""aggregate var_pop on columns"""
type procedures_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "procedures"
"""
input procedures_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type procedures_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "procedures"
"""
input procedures_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type procedures_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "procedures"
"""
input procedures_variance_order_by {
  id: order_by
}

"""query root"""
type query_root {
  """
  fetch data from the table: "cases"
  """
  cases(
    """distinct select on columns"""
    distinct_on: [cases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cases_order_by!]

    """filter the rows returned"""
    where: cases_bool_exp
  ): [cases!]!

  """
  fetch aggregated fields from the table: "cases"
  """
  cases_aggregate(
    """distinct select on columns"""
    distinct_on: [cases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cases_order_by!]

    """filter the rows returned"""
    where: cases_bool_exp
  ): cases_aggregate!

  """fetch data from the table: "cases" using primary key columns"""
  cases_by_pk(id: Int!): cases

  """
  fetch data from the table: "disease"
  """
  disease(
    """distinct select on columns"""
    distinct_on: [disease_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [disease_order_by!]

    """filter the rows returned"""
    where: disease_bool_exp
  ): [disease!]!

  """
  fetch aggregated fields from the table: "disease"
  """
  disease_aggregate(
    """distinct select on columns"""
    distinct_on: [disease_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [disease_order_by!]

    """filter the rows returned"""
    where: disease_bool_exp
  ): disease_aggregate!

  """fetch data from the table: "disease" using primary key columns"""
  disease_by_pk(id: Int!): disease

  """
  fetch data from the table: "names"
  """
  names(
    """distinct select on columns"""
    distinct_on: [names_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [names_order_by!]

    """filter the rows returned"""
    where: names_bool_exp
  ): [names!]!

  """
  fetch aggregated fields from the table: "names"
  """
  names_aggregate(
    """distinct select on columns"""
    distinct_on: [names_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [names_order_by!]

    """filter the rows returned"""
    where: names_bool_exp
  ): names_aggregate!

  """fetch data from the table: "names" using primary key columns"""
  names_by_pk(id: Int!): names

  """
  fetch data from the table: "operations"
  """
  operations(
    """distinct select on columns"""
    distinct_on: [operations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [operations_order_by!]

    """filter the rows returned"""
    where: operations_bool_exp
  ): [operations!]!

  """
  fetch aggregated fields from the table: "operations"
  """
  operations_aggregate(
    """distinct select on columns"""
    distinct_on: [operations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [operations_order_by!]

    """filter the rows returned"""
    where: operations_bool_exp
  ): operations_aggregate!

  """fetch data from the table: "operations" using primary key columns"""
  operations_by_pk(id: Int!): operations

  """
  fetch data from the table: "procedures"
  """
  procedures(
    """distinct select on columns"""
    distinct_on: [procedures_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [procedures_order_by!]

    """filter the rows returned"""
    where: procedures_bool_exp
  ): [procedures!]!

  """
  fetch aggregated fields from the table: "procedures"
  """
  procedures_aggregate(
    """distinct select on columns"""
    distinct_on: [procedures_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [procedures_order_by!]

    """filter the rows returned"""
    where: procedures_bool_exp
  ): procedures_aggregate!

  """fetch data from the table: "procedures" using primary key columns"""
  procedures_by_pk(id: Int!): procedures
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "cases"
  """
  cases(
    """distinct select on columns"""
    distinct_on: [cases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cases_order_by!]

    """filter the rows returned"""
    where: cases_bool_exp
  ): [cases!]!

  """
  fetch aggregated fields from the table: "cases"
  """
  cases_aggregate(
    """distinct select on columns"""
    distinct_on: [cases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cases_order_by!]

    """filter the rows returned"""
    where: cases_bool_exp
  ): cases_aggregate!

  """fetch data from the table: "cases" using primary key columns"""
  cases_by_pk(id: Int!): cases

  """
  fetch data from the table: "disease"
  """
  disease(
    """distinct select on columns"""
    distinct_on: [disease_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [disease_order_by!]

    """filter the rows returned"""
    where: disease_bool_exp
  ): [disease!]!

  """
  fetch aggregated fields from the table: "disease"
  """
  disease_aggregate(
    """distinct select on columns"""
    distinct_on: [disease_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [disease_order_by!]

    """filter the rows returned"""
    where: disease_bool_exp
  ): disease_aggregate!

  """fetch data from the table: "disease" using primary key columns"""
  disease_by_pk(id: Int!): disease

  """
  fetch data from the table: "names"
  """
  names(
    """distinct select on columns"""
    distinct_on: [names_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [names_order_by!]

    """filter the rows returned"""
    where: names_bool_exp
  ): [names!]!

  """
  fetch aggregated fields from the table: "names"
  """
  names_aggregate(
    """distinct select on columns"""
    distinct_on: [names_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [names_order_by!]

    """filter the rows returned"""
    where: names_bool_exp
  ): names_aggregate!

  """fetch data from the table: "names" using primary key columns"""
  names_by_pk(id: Int!): names

  """
  fetch data from the table: "operations"
  """
  operations(
    """distinct select on columns"""
    distinct_on: [operations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [operations_order_by!]

    """filter the rows returned"""
    where: operations_bool_exp
  ): [operations!]!

  """
  fetch aggregated fields from the table: "operations"
  """
  operations_aggregate(
    """distinct select on columns"""
    distinct_on: [operations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [operations_order_by!]

    """filter the rows returned"""
    where: operations_bool_exp
  ): operations_aggregate!

  """fetch data from the table: "operations" using primary key columns"""
  operations_by_pk(id: Int!): operations

  """
  fetch data from the table: "procedures"
  """
  procedures(
    """distinct select on columns"""
    distinct_on: [procedures_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [procedures_order_by!]

    """filter the rows returned"""
    where: procedures_bool_exp
  ): [procedures!]!

  """
  fetch aggregated fields from the table: "procedures"
  """
  procedures_aggregate(
    """distinct select on columns"""
    distinct_on: [procedures_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [procedures_order_by!]

    """filter the rows returned"""
    where: procedures_bool_exp
  ): procedures_aggregate!

  """fetch data from the table: "procedures" using primary key columns"""
  procedures_by_pk(id: Int!): procedures
}
