# source: http://localhost:8080/v1/graphql
# timestamp: Mon Oct 12 2020 22:19:02 GMT+0800 (Australian Western Standard Time)

schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
columns and relationships of "access"
"""
type access {
  """An array relationship"""
  cases(
    """distinct select on columns"""
    distinct_on: [cases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cases_order_by!]

    """filter the rows returned"""
    where: cases_bool_exp
  ): [cases!]!

  """An aggregated array relationship"""
  cases_aggregate(
    """distinct select on columns"""
    distinct_on: [cases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cases_order_by!]

    """filter the rows returned"""
    where: cases_bool_exp
  ): cases_aggregate!
  id: Int!
  vessel: String!
}

"""
aggregated selection of "access"
"""
type access_aggregate {
  aggregate: access_aggregate_fields
  nodes: [access!]!
}

"""
aggregate fields of "access"
"""
type access_aggregate_fields {
  avg: access_avg_fields
  count(columns: [access_select_column!], distinct: Boolean): Int
  max: access_max_fields
  min: access_min_fields
  stddev: access_stddev_fields
  stddev_pop: access_stddev_pop_fields
  stddev_samp: access_stddev_samp_fields
  sum: access_sum_fields
  var_pop: access_var_pop_fields
  var_samp: access_var_samp_fields
  variance: access_variance_fields
}

"""
order by aggregate values of table "access"
"""
input access_aggregate_order_by {
  avg: access_avg_order_by
  count: order_by
  max: access_max_order_by
  min: access_min_order_by
  stddev: access_stddev_order_by
  stddev_pop: access_stddev_pop_order_by
  stddev_samp: access_stddev_samp_order_by
  sum: access_sum_order_by
  var_pop: access_var_pop_order_by
  var_samp: access_var_samp_order_by
  variance: access_variance_order_by
}

"""
input type for inserting array relation for remote table "access"
"""
input access_arr_rel_insert_input {
  data: [access_insert_input!]!
  on_conflict: access_on_conflict
}

"""aggregate avg on columns"""
type access_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "access"
"""
input access_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "access". All fields are combined with a logical 'AND'.
"""
input access_bool_exp {
  _and: [access_bool_exp]
  _not: access_bool_exp
  _or: [access_bool_exp]
  cases: cases_bool_exp
  id: Int_comparison_exp
  vessel: String_comparison_exp
}

"""
unique or primary key constraints on table "access"
"""
enum access_constraint {
  """unique or primary key constraint"""
  access_pkey

  """unique or primary key constraint"""
  access_vessel_key
}

"""
input type for incrementing integer columne in table "access"
"""
input access_inc_input {
  id: Int
}

"""
input type for inserting data into table "access"
"""
input access_insert_input {
  cases: cases_arr_rel_insert_input
  id: Int
  vessel: String
}

"""aggregate max on columns"""
type access_max_fields {
  id: Int
  vessel: String
}

"""
order by max() on columns of table "access"
"""
input access_max_order_by {
  id: order_by
  vessel: order_by
}

"""aggregate min on columns"""
type access_min_fields {
  id: Int
  vessel: String
}

"""
order by min() on columns of table "access"
"""
input access_min_order_by {
  id: order_by
  vessel: order_by
}

"""
response of any mutation on the table "access"
"""
type access_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [access!]!
}

"""
input type for inserting object relation for remote table "access"
"""
input access_obj_rel_insert_input {
  data: access_insert_input!
  on_conflict: access_on_conflict
}

"""
on conflict condition type for table "access"
"""
input access_on_conflict {
  constraint: access_constraint!
  update_columns: [access_update_column!]!
  where: access_bool_exp
}

"""
ordering options when selecting data from "access"
"""
input access_order_by {
  cases_aggregate: cases_aggregate_order_by
  id: order_by
  vessel: order_by
}

"""
select columns of table "access"
"""
enum access_select_column {
  """column name"""
  id

  """column name"""
  vessel
}

"""
input type for updating data in table "access"
"""
input access_set_input {
  id: Int
  vessel: String
}

"""aggregate stddev on columns"""
type access_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "access"
"""
input access_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type access_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "access"
"""
input access_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type access_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "access"
"""
input access_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type access_sum_fields {
  id: Int
}

"""
order by sum() on columns of table "access"
"""
input access_sum_order_by {
  id: order_by
}

"""
update columns of table "access"
"""
enum access_update_column {
  """column name"""
  id

  """column name"""
  vessel
}

"""aggregate var_pop on columns"""
type access_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "access"
"""
input access_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type access_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "access"
"""
input access_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type access_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "access"
"""
input access_variance_order_by {
  id: order_by
}

"""
columns and relationships of "aneurysm"
"""
type aneurysm {
  """An array relationship"""
  cases(
    """distinct select on columns"""
    distinct_on: [cases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cases_order_by!]

    """filter the rows returned"""
    where: cases_bool_exp
  ): [cases!]!

  """An aggregated array relationship"""
  cases_aggregate(
    """distinct select on columns"""
    distinct_on: [cases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cases_order_by!]

    """filter the rows returned"""
    where: cases_bool_exp
  ): cases_aggregate!
  group: String!
  id: Int!
  site: String!
}

"""
aggregated selection of "aneurysm"
"""
type aneurysm_aggregate {
  aggregate: aneurysm_aggregate_fields
  nodes: [aneurysm!]!
}

"""
aggregate fields of "aneurysm"
"""
type aneurysm_aggregate_fields {
  avg: aneurysm_avg_fields
  count(columns: [aneurysm_select_column!], distinct: Boolean): Int
  max: aneurysm_max_fields
  min: aneurysm_min_fields
  stddev: aneurysm_stddev_fields
  stddev_pop: aneurysm_stddev_pop_fields
  stddev_samp: aneurysm_stddev_samp_fields
  sum: aneurysm_sum_fields
  var_pop: aneurysm_var_pop_fields
  var_samp: aneurysm_var_samp_fields
  variance: aneurysm_variance_fields
}

"""
order by aggregate values of table "aneurysm"
"""
input aneurysm_aggregate_order_by {
  avg: aneurysm_avg_order_by
  count: order_by
  max: aneurysm_max_order_by
  min: aneurysm_min_order_by
  stddev: aneurysm_stddev_order_by
  stddev_pop: aneurysm_stddev_pop_order_by
  stddev_samp: aneurysm_stddev_samp_order_by
  sum: aneurysm_sum_order_by
  var_pop: aneurysm_var_pop_order_by
  var_samp: aneurysm_var_samp_order_by
  variance: aneurysm_variance_order_by
}

"""
input type for inserting array relation for remote table "aneurysm"
"""
input aneurysm_arr_rel_insert_input {
  data: [aneurysm_insert_input!]!
  on_conflict: aneurysm_on_conflict
}

"""aggregate avg on columns"""
type aneurysm_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "aneurysm"
"""
input aneurysm_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "aneurysm". All fields are combined with a logical 'AND'.
"""
input aneurysm_bool_exp {
  _and: [aneurysm_bool_exp]
  _not: aneurysm_bool_exp
  _or: [aneurysm_bool_exp]
  cases: cases_bool_exp
  group: String_comparison_exp
  id: Int_comparison_exp
  site: String_comparison_exp
}

"""
unique or primary key constraints on table "aneurysm"
"""
enum aneurysm_constraint {
  """unique or primary key constraint"""
  aneurysm_pkey

  """unique or primary key constraint"""
  aneurysm_site_key
}

"""
input type for incrementing integer columne in table "aneurysm"
"""
input aneurysm_inc_input {
  id: Int
}

"""
input type for inserting data into table "aneurysm"
"""
input aneurysm_insert_input {
  cases: cases_arr_rel_insert_input
  group: String
  id: Int
  site: String
}

"""aggregate max on columns"""
type aneurysm_max_fields {
  group: String
  id: Int
  site: String
}

"""
order by max() on columns of table "aneurysm"
"""
input aneurysm_max_order_by {
  group: order_by
  id: order_by
  site: order_by
}

"""aggregate min on columns"""
type aneurysm_min_fields {
  group: String
  id: Int
  site: String
}

"""
order by min() on columns of table "aneurysm"
"""
input aneurysm_min_order_by {
  group: order_by
  id: order_by
  site: order_by
}

"""
response of any mutation on the table "aneurysm"
"""
type aneurysm_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [aneurysm!]!
}

"""
input type for inserting object relation for remote table "aneurysm"
"""
input aneurysm_obj_rel_insert_input {
  data: aneurysm_insert_input!
  on_conflict: aneurysm_on_conflict
}

"""
on conflict condition type for table "aneurysm"
"""
input aneurysm_on_conflict {
  constraint: aneurysm_constraint!
  update_columns: [aneurysm_update_column!]!
  where: aneurysm_bool_exp
}

"""
ordering options when selecting data from "aneurysm"
"""
input aneurysm_order_by {
  cases_aggregate: cases_aggregate_order_by
  group: order_by
  id: order_by
  site: order_by
}

"""
select columns of table "aneurysm"
"""
enum aneurysm_select_column {
  """column name"""
  group

  """column name"""
  id

  """column name"""
  site
}

"""
input type for updating data in table "aneurysm"
"""
input aneurysm_set_input {
  group: String
  id: Int
  site: String
}

"""aggregate stddev on columns"""
type aneurysm_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "aneurysm"
"""
input aneurysm_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type aneurysm_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "aneurysm"
"""
input aneurysm_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type aneurysm_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "aneurysm"
"""
input aneurysm_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type aneurysm_sum_fields {
  id: Int
}

"""
order by sum() on columns of table "aneurysm"
"""
input aneurysm_sum_order_by {
  id: order_by
}

"""
update columns of table "aneurysm"
"""
enum aneurysm_update_column {
  """column name"""
  group

  """column name"""
  id

  """column name"""
  site
}

"""aggregate var_pop on columns"""
type aneurysm_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "aneurysm"
"""
input aneurysm_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type aneurysm_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "aneurysm"
"""
input aneurysm_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type aneurysm_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "aneurysm"
"""
input aneurysm_variance_order_by {
  id: order_by
}

"""
columns and relationships of "cases"
"""
type cases {
  """An object relationship"""
  access: access
  access_id: Int

  """An object relationship"""
  aneurysm: aneurysm
  aneurysm_id: Int
  date: timestamp!

  """An object relationship"""
  doctor: doctors!
  doctor_id: Int!
  id: Int!

  """An object relationship"""
  patient: patients!
  patient_id: Int!

  """An object relationship"""
  procedure: procedures
  procedure_id: Int
}

"""
aggregated selection of "cases"
"""
type cases_aggregate {
  aggregate: cases_aggregate_fields
  nodes: [cases!]!
}

"""
aggregate fields of "cases"
"""
type cases_aggregate_fields {
  avg: cases_avg_fields
  count(columns: [cases_select_column!], distinct: Boolean): Int
  max: cases_max_fields
  min: cases_min_fields
  stddev: cases_stddev_fields
  stddev_pop: cases_stddev_pop_fields
  stddev_samp: cases_stddev_samp_fields
  sum: cases_sum_fields
  var_pop: cases_var_pop_fields
  var_samp: cases_var_samp_fields
  variance: cases_variance_fields
}

"""
order by aggregate values of table "cases"
"""
input cases_aggregate_order_by {
  avg: cases_avg_order_by
  count: order_by
  max: cases_max_order_by
  min: cases_min_order_by
  stddev: cases_stddev_order_by
  stddev_pop: cases_stddev_pop_order_by
  stddev_samp: cases_stddev_samp_order_by
  sum: cases_sum_order_by
  var_pop: cases_var_pop_order_by
  var_samp: cases_var_samp_order_by
  variance: cases_variance_order_by
}

"""
input type for inserting array relation for remote table "cases"
"""
input cases_arr_rel_insert_input {
  data: [cases_insert_input!]!
  on_conflict: cases_on_conflict
}

"""aggregate avg on columns"""
type cases_avg_fields {
  access_id: Float
  aneurysm_id: Float
  doctor_id: Float
  id: Float
  patient_id: Float
  procedure_id: Float
}

"""
order by avg() on columns of table "cases"
"""
input cases_avg_order_by {
  access_id: order_by
  aneurysm_id: order_by
  doctor_id: order_by
  id: order_by
  patient_id: order_by
  procedure_id: order_by
}

"""
Boolean expression to filter rows from the table "cases". All fields are combined with a logical 'AND'.
"""
input cases_bool_exp {
  _and: [cases_bool_exp]
  _not: cases_bool_exp
  _or: [cases_bool_exp]
  access: access_bool_exp
  access_id: Int_comparison_exp
  aneurysm: aneurysm_bool_exp
  aneurysm_id: Int_comparison_exp
  date: timestamp_comparison_exp
  doctor: doctors_bool_exp
  doctor_id: Int_comparison_exp
  id: Int_comparison_exp
  patient: patients_bool_exp
  patient_id: Int_comparison_exp
  procedure: procedures_bool_exp
  procedure_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "cases"
"""
enum cases_constraint {
  """unique or primary key constraint"""
  cases_id_key1

  """unique or primary key constraint"""
  cases_pkey
}

"""
input type for incrementing integer columne in table "cases"
"""
input cases_inc_input {
  access_id: Int
  aneurysm_id: Int
  doctor_id: Int
  id: Int
  patient_id: Int
  procedure_id: Int
}

"""
input type for inserting data into table "cases"
"""
input cases_insert_input {
  access: access_obj_rel_insert_input
  access_id: Int
  aneurysm: aneurysm_obj_rel_insert_input
  aneurysm_id: Int
  date: timestamp
  doctor: doctors_obj_rel_insert_input
  doctor_id: Int
  id: Int
  patient: patients_obj_rel_insert_input
  patient_id: Int
  procedure: procedures_obj_rel_insert_input
  procedure_id: Int
}

"""aggregate max on columns"""
type cases_max_fields {
  access_id: Int
  aneurysm_id: Int
  doctor_id: Int
  id: Int
  patient_id: Int
  procedure_id: Int
}

"""
order by max() on columns of table "cases"
"""
input cases_max_order_by {
  access_id: order_by
  aneurysm_id: order_by
  doctor_id: order_by
  id: order_by
  patient_id: order_by
  procedure_id: order_by
}

"""aggregate min on columns"""
type cases_min_fields {
  access_id: Int
  aneurysm_id: Int
  doctor_id: Int
  id: Int
  patient_id: Int
  procedure_id: Int
}

"""
order by min() on columns of table "cases"
"""
input cases_min_order_by {
  access_id: order_by
  aneurysm_id: order_by
  doctor_id: order_by
  id: order_by
  patient_id: order_by
  procedure_id: order_by
}

"""
response of any mutation on the table "cases"
"""
type cases_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [cases!]!
}

"""
input type for inserting object relation for remote table "cases"
"""
input cases_obj_rel_insert_input {
  data: cases_insert_input!
  on_conflict: cases_on_conflict
}

"""
on conflict condition type for table "cases"
"""
input cases_on_conflict {
  constraint: cases_constraint!
  update_columns: [cases_update_column!]!
  where: cases_bool_exp
}

"""
ordering options when selecting data from "cases"
"""
input cases_order_by {
  access: access_order_by
  access_id: order_by
  aneurysm: aneurysm_order_by
  aneurysm_id: order_by
  date: order_by
  doctor: doctors_order_by
  doctor_id: order_by
  id: order_by
  patient: patients_order_by
  patient_id: order_by
  procedure: procedures_order_by
  procedure_id: order_by
}

"""
select columns of table "cases"
"""
enum cases_select_column {
  """column name"""
  access_id

  """column name"""
  aneurysm_id

  """column name"""
  date

  """column name"""
  doctor_id

  """column name"""
  id

  """column name"""
  patient_id

  """column name"""
  procedure_id
}

"""
input type for updating data in table "cases"
"""
input cases_set_input {
  access_id: Int
  aneurysm_id: Int
  date: timestamp
  doctor_id: Int
  id: Int
  patient_id: Int
  procedure_id: Int
}

"""aggregate stddev on columns"""
type cases_stddev_fields {
  access_id: Float
  aneurysm_id: Float
  doctor_id: Float
  id: Float
  patient_id: Float
  procedure_id: Float
}

"""
order by stddev() on columns of table "cases"
"""
input cases_stddev_order_by {
  access_id: order_by
  aneurysm_id: order_by
  doctor_id: order_by
  id: order_by
  patient_id: order_by
  procedure_id: order_by
}

"""aggregate stddev_pop on columns"""
type cases_stddev_pop_fields {
  access_id: Float
  aneurysm_id: Float
  doctor_id: Float
  id: Float
  patient_id: Float
  procedure_id: Float
}

"""
order by stddev_pop() on columns of table "cases"
"""
input cases_stddev_pop_order_by {
  access_id: order_by
  aneurysm_id: order_by
  doctor_id: order_by
  id: order_by
  patient_id: order_by
  procedure_id: order_by
}

"""aggregate stddev_samp on columns"""
type cases_stddev_samp_fields {
  access_id: Float
  aneurysm_id: Float
  doctor_id: Float
  id: Float
  patient_id: Float
  procedure_id: Float
}

"""
order by stddev_samp() on columns of table "cases"
"""
input cases_stddev_samp_order_by {
  access_id: order_by
  aneurysm_id: order_by
  doctor_id: order_by
  id: order_by
  patient_id: order_by
  procedure_id: order_by
}

"""aggregate sum on columns"""
type cases_sum_fields {
  access_id: Int
  aneurysm_id: Int
  doctor_id: Int
  id: Int
  patient_id: Int
  procedure_id: Int
}

"""
order by sum() on columns of table "cases"
"""
input cases_sum_order_by {
  access_id: order_by
  aneurysm_id: order_by
  doctor_id: order_by
  id: order_by
  patient_id: order_by
  procedure_id: order_by
}

"""
update columns of table "cases"
"""
enum cases_update_column {
  """column name"""
  access_id

  """column name"""
  aneurysm_id

  """column name"""
  date

  """column name"""
  doctor_id

  """column name"""
  id

  """column name"""
  patient_id

  """column name"""
  procedure_id
}

"""aggregate var_pop on columns"""
type cases_var_pop_fields {
  access_id: Float
  aneurysm_id: Float
  doctor_id: Float
  id: Float
  patient_id: Float
  procedure_id: Float
}

"""
order by var_pop() on columns of table "cases"
"""
input cases_var_pop_order_by {
  access_id: order_by
  aneurysm_id: order_by
  doctor_id: order_by
  id: order_by
  patient_id: order_by
  procedure_id: order_by
}

"""aggregate var_samp on columns"""
type cases_var_samp_fields {
  access_id: Float
  aneurysm_id: Float
  doctor_id: Float
  id: Float
  patient_id: Float
  procedure_id: Float
}

"""
order by var_samp() on columns of table "cases"
"""
input cases_var_samp_order_by {
  access_id: order_by
  aneurysm_id: order_by
  doctor_id: order_by
  id: order_by
  patient_id: order_by
  procedure_id: order_by
}

"""aggregate variance on columns"""
type cases_variance_fields {
  access_id: Float
  aneurysm_id: Float
  doctor_id: Float
  id: Float
  patient_id: Float
  procedure_id: Float
}

"""
order by variance() on columns of table "cases"
"""
input cases_variance_order_by {
  access_id: order_by
  aneurysm_id: order_by
  doctor_id: order_by
  id: order_by
  patient_id: order_by
  procedure_id: order_by
}

scalar date

"""
expression to compare columns of type date. All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

"""
columns and relationships of "disease"
"""
type disease {
  description: String!
  id: Int!

  """An array relationship"""
  names(
    """distinct select on columns"""
    distinct_on: [names_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [names_order_by!]

    """filter the rows returned"""
    where: names_bool_exp
  ): [names!]!

  """An aggregated array relationship"""
  names_aggregate(
    """distinct select on columns"""
    distinct_on: [names_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [names_order_by!]

    """filter the rows returned"""
    where: names_bool_exp
  ): names_aggregate!
}

"""
aggregated selection of "disease"
"""
type disease_aggregate {
  aggregate: disease_aggregate_fields
  nodes: [disease!]!
}

"""
aggregate fields of "disease"
"""
type disease_aggregate_fields {
  avg: disease_avg_fields
  count(columns: [disease_select_column!], distinct: Boolean): Int
  max: disease_max_fields
  min: disease_min_fields
  stddev: disease_stddev_fields
  stddev_pop: disease_stddev_pop_fields
  stddev_samp: disease_stddev_samp_fields
  sum: disease_sum_fields
  var_pop: disease_var_pop_fields
  var_samp: disease_var_samp_fields
  variance: disease_variance_fields
}

"""
order by aggregate values of table "disease"
"""
input disease_aggregate_order_by {
  avg: disease_avg_order_by
  count: order_by
  max: disease_max_order_by
  min: disease_min_order_by
  stddev: disease_stddev_order_by
  stddev_pop: disease_stddev_pop_order_by
  stddev_samp: disease_stddev_samp_order_by
  sum: disease_sum_order_by
  var_pop: disease_var_pop_order_by
  var_samp: disease_var_samp_order_by
  variance: disease_variance_order_by
}

"""
input type for inserting array relation for remote table "disease"
"""
input disease_arr_rel_insert_input {
  data: [disease_insert_input!]!
  on_conflict: disease_on_conflict
}

"""aggregate avg on columns"""
type disease_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "disease"
"""
input disease_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "disease". All fields are combined with a logical 'AND'.
"""
input disease_bool_exp {
  _and: [disease_bool_exp]
  _not: disease_bool_exp
  _or: [disease_bool_exp]
  description: String_comparison_exp
  id: Int_comparison_exp
  names: names_bool_exp
}

"""
unique or primary key constraints on table "disease"
"""
enum disease_constraint {
  """unique or primary key constraint"""
  disease_disease_key

  """unique or primary key constraint"""
  disease_pkey
}

"""
input type for incrementing integer columne in table "disease"
"""
input disease_inc_input {
  id: Int
}

"""
input type for inserting data into table "disease"
"""
input disease_insert_input {
  description: String
  id: Int
  names: names_arr_rel_insert_input
}

"""aggregate max on columns"""
type disease_max_fields {
  description: String
  id: Int
}

"""
order by max() on columns of table "disease"
"""
input disease_max_order_by {
  description: order_by
  id: order_by
}

"""aggregate min on columns"""
type disease_min_fields {
  description: String
  id: Int
}

"""
order by min() on columns of table "disease"
"""
input disease_min_order_by {
  description: order_by
  id: order_by
}

"""
response of any mutation on the table "disease"
"""
type disease_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [disease!]!
}

"""
input type for inserting object relation for remote table "disease"
"""
input disease_obj_rel_insert_input {
  data: disease_insert_input!
  on_conflict: disease_on_conflict
}

"""
on conflict condition type for table "disease"
"""
input disease_on_conflict {
  constraint: disease_constraint!
  update_columns: [disease_update_column!]!
  where: disease_bool_exp
}

"""
ordering options when selecting data from "disease"
"""
input disease_order_by {
  description: order_by
  id: order_by
  names_aggregate: names_aggregate_order_by
}

"""
select columns of table "disease"
"""
enum disease_select_column {
  """column name"""
  description

  """column name"""
  id
}

"""
input type for updating data in table "disease"
"""
input disease_set_input {
  description: String
  id: Int
}

"""aggregate stddev on columns"""
type disease_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "disease"
"""
input disease_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type disease_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "disease"
"""
input disease_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type disease_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "disease"
"""
input disease_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type disease_sum_fields {
  id: Int
}

"""
order by sum() on columns of table "disease"
"""
input disease_sum_order_by {
  id: order_by
}

"""
update columns of table "disease"
"""
enum disease_update_column {
  """column name"""
  description

  """column name"""
  id
}

"""aggregate var_pop on columns"""
type disease_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "disease"
"""
input disease_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type disease_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "disease"
"""
input disease_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type disease_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "disease"
"""
input disease_variance_order_by {
  id: order_by
}

"""
columns and relationships of "doctors"
"""
type doctors {
  """An array relationship"""
  cases(
    """distinct select on columns"""
    distinct_on: [cases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cases_order_by!]

    """filter the rows returned"""
    where: cases_bool_exp
  ): [cases!]!

  """An aggregated array relationship"""
  cases_aggregate(
    """distinct select on columns"""
    distinct_on: [cases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cases_order_by!]

    """filter the rows returned"""
    where: cases_bool_exp
  ): cases_aggregate!
  id: Int!
  name: String!
}

"""
aggregated selection of "doctors"
"""
type doctors_aggregate {
  aggregate: doctors_aggregate_fields
  nodes: [doctors!]!
}

"""
aggregate fields of "doctors"
"""
type doctors_aggregate_fields {
  avg: doctors_avg_fields
  count(columns: [doctors_select_column!], distinct: Boolean): Int
  max: doctors_max_fields
  min: doctors_min_fields
  stddev: doctors_stddev_fields
  stddev_pop: doctors_stddev_pop_fields
  stddev_samp: doctors_stddev_samp_fields
  sum: doctors_sum_fields
  var_pop: doctors_var_pop_fields
  var_samp: doctors_var_samp_fields
  variance: doctors_variance_fields
}

"""
order by aggregate values of table "doctors"
"""
input doctors_aggregate_order_by {
  avg: doctors_avg_order_by
  count: order_by
  max: doctors_max_order_by
  min: doctors_min_order_by
  stddev: doctors_stddev_order_by
  stddev_pop: doctors_stddev_pop_order_by
  stddev_samp: doctors_stddev_samp_order_by
  sum: doctors_sum_order_by
  var_pop: doctors_var_pop_order_by
  var_samp: doctors_var_samp_order_by
  variance: doctors_variance_order_by
}

"""
input type for inserting array relation for remote table "doctors"
"""
input doctors_arr_rel_insert_input {
  data: [doctors_insert_input!]!
  on_conflict: doctors_on_conflict
}

"""aggregate avg on columns"""
type doctors_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "doctors"
"""
input doctors_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "doctors". All fields are combined with a logical 'AND'.
"""
input doctors_bool_exp {
  _and: [doctors_bool_exp]
  _not: doctors_bool_exp
  _or: [doctors_bool_exp]
  cases: cases_bool_exp
  id: Int_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "doctors"
"""
enum doctors_constraint {
  """unique or primary key constraint"""
  doctors_name_key

  """unique or primary key constraint"""
  doctors_pkey
}

"""
input type for incrementing integer columne in table "doctors"
"""
input doctors_inc_input {
  id: Int
}

"""
input type for inserting data into table "doctors"
"""
input doctors_insert_input {
  cases: cases_arr_rel_insert_input
  id: Int
  name: String
}

"""aggregate max on columns"""
type doctors_max_fields {
  id: Int
  name: String
}

"""
order by max() on columns of table "doctors"
"""
input doctors_max_order_by {
  id: order_by
  name: order_by
}

"""aggregate min on columns"""
type doctors_min_fields {
  id: Int
  name: String
}

"""
order by min() on columns of table "doctors"
"""
input doctors_min_order_by {
  id: order_by
  name: order_by
}

"""
response of any mutation on the table "doctors"
"""
type doctors_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [doctors!]!
}

"""
input type for inserting object relation for remote table "doctors"
"""
input doctors_obj_rel_insert_input {
  data: doctors_insert_input!
  on_conflict: doctors_on_conflict
}

"""
on conflict condition type for table "doctors"
"""
input doctors_on_conflict {
  constraint: doctors_constraint!
  update_columns: [doctors_update_column!]!
  where: doctors_bool_exp
}

"""
ordering options when selecting data from "doctors"
"""
input doctors_order_by {
  cases_aggregate: cases_aggregate_order_by
  id: order_by
  name: order_by
}

"""
select columns of table "doctors"
"""
enum doctors_select_column {
  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "doctors"
"""
input doctors_set_input {
  id: Int
  name: String
}

"""aggregate stddev on columns"""
type doctors_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "doctors"
"""
input doctors_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type doctors_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "doctors"
"""
input doctors_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type doctors_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "doctors"
"""
input doctors_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type doctors_sum_fields {
  id: Int
}

"""
order by sum() on columns of table "doctors"
"""
input doctors_sum_order_by {
  id: order_by
}

"""
update columns of table "doctors"
"""
enum doctors_update_column {
  """column name"""
  id

  """column name"""
  name
}

"""aggregate var_pop on columns"""
type doctors_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "doctors"
"""
input doctors_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type doctors_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "doctors"
"""
input doctors_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type doctors_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "doctors"
"""
input doctors_variance_order_by {
  id: order_by
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "access"
  """
  delete_access(
    """filter the rows which have to be deleted"""
    where: access_bool_exp!
  ): access_mutation_response

  """
  delete data from the table: "aneurysm"
  """
  delete_aneurysm(
    """filter the rows which have to be deleted"""
    where: aneurysm_bool_exp!
  ): aneurysm_mutation_response

  """
  delete data from the table: "cases"
  """
  delete_cases(
    """filter the rows which have to be deleted"""
    where: cases_bool_exp!
  ): cases_mutation_response

  """
  delete data from the table: "disease"
  """
  delete_disease(
    """filter the rows which have to be deleted"""
    where: disease_bool_exp!
  ): disease_mutation_response

  """
  delete data from the table: "doctors"
  """
  delete_doctors(
    """filter the rows which have to be deleted"""
    where: doctors_bool_exp!
  ): doctors_mutation_response

  """
  delete data from the table: "names"
  """
  delete_names(
    """filter the rows which have to be deleted"""
    where: names_bool_exp!
  ): names_mutation_response

  """
  delete data from the table: "operations"
  """
  delete_operations(
    """filter the rows which have to be deleted"""
    where: operations_bool_exp!
  ): operations_mutation_response

  """
  delete data from the table: "patients"
  """
  delete_patients(
    """filter the rows which have to be deleted"""
    where: patients_bool_exp!
  ): patients_mutation_response

  """
  delete data from the table: "procedures"
  """
  delete_procedures(
    """filter the rows which have to be deleted"""
    where: procedures_bool_exp!
  ): procedures_mutation_response

  """
  insert data into the table: "access"
  """
  insert_access(
    """the rows to be inserted"""
    objects: [access_insert_input!]!

    """on conflict condition"""
    on_conflict: access_on_conflict
  ): access_mutation_response

  """
  insert data into the table: "aneurysm"
  """
  insert_aneurysm(
    """the rows to be inserted"""
    objects: [aneurysm_insert_input!]!

    """on conflict condition"""
    on_conflict: aneurysm_on_conflict
  ): aneurysm_mutation_response

  """
  insert data into the table: "cases"
  """
  insert_cases(
    """the rows to be inserted"""
    objects: [cases_insert_input!]!

    """on conflict condition"""
    on_conflict: cases_on_conflict
  ): cases_mutation_response

  """
  insert data into the table: "disease"
  """
  insert_disease(
    """the rows to be inserted"""
    objects: [disease_insert_input!]!

    """on conflict condition"""
    on_conflict: disease_on_conflict
  ): disease_mutation_response

  """
  insert data into the table: "doctors"
  """
  insert_doctors(
    """the rows to be inserted"""
    objects: [doctors_insert_input!]!

    """on conflict condition"""
    on_conflict: doctors_on_conflict
  ): doctors_mutation_response

  """
  insert data into the table: "names"
  """
  insert_names(
    """the rows to be inserted"""
    objects: [names_insert_input!]!

    """on conflict condition"""
    on_conflict: names_on_conflict
  ): names_mutation_response

  """
  insert data into the table: "operations"
  """
  insert_operations(
    """the rows to be inserted"""
    objects: [operations_insert_input!]!

    """on conflict condition"""
    on_conflict: operations_on_conflict
  ): operations_mutation_response

  """
  insert data into the table: "patients"
  """
  insert_patients(
    """the rows to be inserted"""
    objects: [patients_insert_input!]!

    """on conflict condition"""
    on_conflict: patients_on_conflict
  ): patients_mutation_response

  """
  insert data into the table: "procedures"
  """
  insert_procedures(
    """the rows to be inserted"""
    objects: [procedures_insert_input!]!

    """on conflict condition"""
    on_conflict: procedures_on_conflict
  ): procedures_mutation_response

  """
  update data of the table: "access"
  """
  update_access(
    """increments the integer columns with given value of the filtered values"""
    _inc: access_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: access_set_input

    """filter the rows which have to be updated"""
    where: access_bool_exp!
  ): access_mutation_response

  """
  update data of the table: "aneurysm"
  """
  update_aneurysm(
    """increments the integer columns with given value of the filtered values"""
    _inc: aneurysm_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: aneurysm_set_input

    """filter the rows which have to be updated"""
    where: aneurysm_bool_exp!
  ): aneurysm_mutation_response

  """
  update data of the table: "cases"
  """
  update_cases(
    """increments the integer columns with given value of the filtered values"""
    _inc: cases_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: cases_set_input

    """filter the rows which have to be updated"""
    where: cases_bool_exp!
  ): cases_mutation_response

  """
  update data of the table: "disease"
  """
  update_disease(
    """increments the integer columns with given value of the filtered values"""
    _inc: disease_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: disease_set_input

    """filter the rows which have to be updated"""
    where: disease_bool_exp!
  ): disease_mutation_response

  """
  update data of the table: "doctors"
  """
  update_doctors(
    """increments the integer columns with given value of the filtered values"""
    _inc: doctors_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: doctors_set_input

    """filter the rows which have to be updated"""
    where: doctors_bool_exp!
  ): doctors_mutation_response

  """
  update data of the table: "names"
  """
  update_names(
    """increments the integer columns with given value of the filtered values"""
    _inc: names_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: names_set_input

    """filter the rows which have to be updated"""
    where: names_bool_exp!
  ): names_mutation_response

  """
  update data of the table: "operations"
  """
  update_operations(
    """increments the integer columns with given value of the filtered values"""
    _inc: operations_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: operations_set_input

    """filter the rows which have to be updated"""
    where: operations_bool_exp!
  ): operations_mutation_response

  """
  update data of the table: "patients"
  """
  update_patients(
    """increments the integer columns with given value of the filtered values"""
    _inc: patients_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: patients_set_input

    """filter the rows which have to be updated"""
    where: patients_bool_exp!
  ): patients_mutation_response

  """
  update data of the table: "procedures"
  """
  update_procedures(
    """increments the integer columns with given value of the filtered values"""
    _inc: procedures_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: procedures_set_input

    """filter the rows which have to be updated"""
    where: procedures_bool_exp!
  ): procedures_mutation_response
}

"""
columns and relationships of "names"
"""
type names {
  color: String

  """An object relationship"""
  disease: disease
  disease_id: Int
  id: Int!
  name: String!
  number: Int
}

"""
aggregated selection of "names"
"""
type names_aggregate {
  aggregate: names_aggregate_fields
  nodes: [names!]!
}

"""
aggregate fields of "names"
"""
type names_aggregate_fields {
  avg: names_avg_fields
  count(columns: [names_select_column!], distinct: Boolean): Int
  max: names_max_fields
  min: names_min_fields
  stddev: names_stddev_fields
  stddev_pop: names_stddev_pop_fields
  stddev_samp: names_stddev_samp_fields
  sum: names_sum_fields
  var_pop: names_var_pop_fields
  var_samp: names_var_samp_fields
  variance: names_variance_fields
}

"""
order by aggregate values of table "names"
"""
input names_aggregate_order_by {
  avg: names_avg_order_by
  count: order_by
  max: names_max_order_by
  min: names_min_order_by
  stddev: names_stddev_order_by
  stddev_pop: names_stddev_pop_order_by
  stddev_samp: names_stddev_samp_order_by
  sum: names_sum_order_by
  var_pop: names_var_pop_order_by
  var_samp: names_var_samp_order_by
  variance: names_variance_order_by
}

"""
input type for inserting array relation for remote table "names"
"""
input names_arr_rel_insert_input {
  data: [names_insert_input!]!
  on_conflict: names_on_conflict
}

"""aggregate avg on columns"""
type names_avg_fields {
  disease_id: Float
  id: Float
  number: Float
}

"""
order by avg() on columns of table "names"
"""
input names_avg_order_by {
  disease_id: order_by
  id: order_by
  number: order_by
}

"""
Boolean expression to filter rows from the table "names". All fields are combined with a logical 'AND'.
"""
input names_bool_exp {
  _and: [names_bool_exp]
  _not: names_bool_exp
  _or: [names_bool_exp]
  color: String_comparison_exp
  disease: disease_bool_exp
  disease_id: Int_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  number: Int_comparison_exp
}

"""
unique or primary key constraints on table "names"
"""
enum names_constraint {
  """unique or primary key constraint"""
  names_pkey
}

"""
input type for incrementing integer columne in table "names"
"""
input names_inc_input {
  disease_id: Int
  id: Int
  number: Int
}

"""
input type for inserting data into table "names"
"""
input names_insert_input {
  color: String
  disease: disease_obj_rel_insert_input
  disease_id: Int
  id: Int
  name: String
  number: Int
}

"""aggregate max on columns"""
type names_max_fields {
  color: String
  disease_id: Int
  id: Int
  name: String
  number: Int
}

"""
order by max() on columns of table "names"
"""
input names_max_order_by {
  color: order_by
  disease_id: order_by
  id: order_by
  name: order_by
  number: order_by
}

"""aggregate min on columns"""
type names_min_fields {
  color: String
  disease_id: Int
  id: Int
  name: String
  number: Int
}

"""
order by min() on columns of table "names"
"""
input names_min_order_by {
  color: order_by
  disease_id: order_by
  id: order_by
  name: order_by
  number: order_by
}

"""
response of any mutation on the table "names"
"""
type names_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [names!]!
}

"""
input type for inserting object relation for remote table "names"
"""
input names_obj_rel_insert_input {
  data: names_insert_input!
  on_conflict: names_on_conflict
}

"""
on conflict condition type for table "names"
"""
input names_on_conflict {
  constraint: names_constraint!
  update_columns: [names_update_column!]!
  where: names_bool_exp
}

"""
ordering options when selecting data from "names"
"""
input names_order_by {
  color: order_by
  disease: disease_order_by
  disease_id: order_by
  id: order_by
  name: order_by
  number: order_by
}

"""
select columns of table "names"
"""
enum names_select_column {
  """column name"""
  color

  """column name"""
  disease_id

  """column name"""
  id

  """column name"""
  name

  """column name"""
  number
}

"""
input type for updating data in table "names"
"""
input names_set_input {
  color: String
  disease_id: Int
  id: Int
  name: String
  number: Int
}

"""aggregate stddev on columns"""
type names_stddev_fields {
  disease_id: Float
  id: Float
  number: Float
}

"""
order by stddev() on columns of table "names"
"""
input names_stddev_order_by {
  disease_id: order_by
  id: order_by
  number: order_by
}

"""aggregate stddev_pop on columns"""
type names_stddev_pop_fields {
  disease_id: Float
  id: Float
  number: Float
}

"""
order by stddev_pop() on columns of table "names"
"""
input names_stddev_pop_order_by {
  disease_id: order_by
  id: order_by
  number: order_by
}

"""aggregate stddev_samp on columns"""
type names_stddev_samp_fields {
  disease_id: Float
  id: Float
  number: Float
}

"""
order by stddev_samp() on columns of table "names"
"""
input names_stddev_samp_order_by {
  disease_id: order_by
  id: order_by
  number: order_by
}

"""aggregate sum on columns"""
type names_sum_fields {
  disease_id: Int
  id: Int
  number: Int
}

"""
order by sum() on columns of table "names"
"""
input names_sum_order_by {
  disease_id: order_by
  id: order_by
  number: order_by
}

"""
update columns of table "names"
"""
enum names_update_column {
  """column name"""
  color

  """column name"""
  disease_id

  """column name"""
  id

  """column name"""
  name

  """column name"""
  number
}

"""aggregate var_pop on columns"""
type names_var_pop_fields {
  disease_id: Float
  id: Float
  number: Float
}

"""
order by var_pop() on columns of table "names"
"""
input names_var_pop_order_by {
  disease_id: order_by
  id: order_by
  number: order_by
}

"""aggregate var_samp on columns"""
type names_var_samp_fields {
  disease_id: Float
  id: Float
  number: Float
}

"""
order by var_samp() on columns of table "names"
"""
input names_var_samp_order_by {
  disease_id: order_by
  id: order_by
  number: order_by
}

"""aggregate variance on columns"""
type names_variance_fields {
  disease_id: Float
  id: Float
  number: Float
}

"""
order by variance() on columns of table "names"
"""
input names_variance_order_by {
  disease_id: order_by
  id: order_by
  number: order_by
}

"""
columns and relationships of "operations"
"""
type operations {
  description: String!
  id: Int!
}

"""
aggregated selection of "operations"
"""
type operations_aggregate {
  aggregate: operations_aggregate_fields
  nodes: [operations!]!
}

"""
aggregate fields of "operations"
"""
type operations_aggregate_fields {
  avg: operations_avg_fields
  count(columns: [operations_select_column!], distinct: Boolean): Int
  max: operations_max_fields
  min: operations_min_fields
  stddev: operations_stddev_fields
  stddev_pop: operations_stddev_pop_fields
  stddev_samp: operations_stddev_samp_fields
  sum: operations_sum_fields
  var_pop: operations_var_pop_fields
  var_samp: operations_var_samp_fields
  variance: operations_variance_fields
}

"""
order by aggregate values of table "operations"
"""
input operations_aggregate_order_by {
  avg: operations_avg_order_by
  count: order_by
  max: operations_max_order_by
  min: operations_min_order_by
  stddev: operations_stddev_order_by
  stddev_pop: operations_stddev_pop_order_by
  stddev_samp: operations_stddev_samp_order_by
  sum: operations_sum_order_by
  var_pop: operations_var_pop_order_by
  var_samp: operations_var_samp_order_by
  variance: operations_variance_order_by
}

"""
input type for inserting array relation for remote table "operations"
"""
input operations_arr_rel_insert_input {
  data: [operations_insert_input!]!
  on_conflict: operations_on_conflict
}

"""aggregate avg on columns"""
type operations_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "operations"
"""
input operations_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "operations". All fields are combined with a logical 'AND'.
"""
input operations_bool_exp {
  _and: [operations_bool_exp]
  _not: operations_bool_exp
  _or: [operations_bool_exp]
  description: String_comparison_exp
  id: Int_comparison_exp
}

"""
unique or primary key constraints on table "operations"
"""
enum operations_constraint {
  """unique or primary key constraint"""
  operations_pkey
}

"""
input type for incrementing integer columne in table "operations"
"""
input operations_inc_input {
  id: Int
}

"""
input type for inserting data into table "operations"
"""
input operations_insert_input {
  description: String
  id: Int
}

"""aggregate max on columns"""
type operations_max_fields {
  description: String
  id: Int
}

"""
order by max() on columns of table "operations"
"""
input operations_max_order_by {
  description: order_by
  id: order_by
}

"""aggregate min on columns"""
type operations_min_fields {
  description: String
  id: Int
}

"""
order by min() on columns of table "operations"
"""
input operations_min_order_by {
  description: order_by
  id: order_by
}

"""
response of any mutation on the table "operations"
"""
type operations_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [operations!]!
}

"""
input type for inserting object relation for remote table "operations"
"""
input operations_obj_rel_insert_input {
  data: operations_insert_input!
  on_conflict: operations_on_conflict
}

"""
on conflict condition type for table "operations"
"""
input operations_on_conflict {
  constraint: operations_constraint!
  update_columns: [operations_update_column!]!
  where: operations_bool_exp
}

"""
ordering options when selecting data from "operations"
"""
input operations_order_by {
  description: order_by
  id: order_by
}

"""
select columns of table "operations"
"""
enum operations_select_column {
  """column name"""
  description

  """column name"""
  id
}

"""
input type for updating data in table "operations"
"""
input operations_set_input {
  description: String
  id: Int
}

"""aggregate stddev on columns"""
type operations_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "operations"
"""
input operations_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type operations_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "operations"
"""
input operations_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type operations_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "operations"
"""
input operations_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type operations_sum_fields {
  id: Int
}

"""
order by sum() on columns of table "operations"
"""
input operations_sum_order_by {
  id: order_by
}

"""
update columns of table "operations"
"""
enum operations_update_column {
  """column name"""
  description

  """column name"""
  id
}

"""aggregate var_pop on columns"""
type operations_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "operations"
"""
input operations_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type operations_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "operations"
"""
input operations_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type operations_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "operations"
"""
input operations_variance_order_by {
  id: order_by
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "patients"
"""
type patients {
  """An array relationship"""
  cases(
    """distinct select on columns"""
    distinct_on: [cases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cases_order_by!]

    """filter the rows returned"""
    where: cases_bool_exp
  ): [cases!]!

  """An aggregated array relationship"""
  cases_aggregate(
    """distinct select on columns"""
    distinct_on: [cases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cases_order_by!]

    """filter the rows returned"""
    where: cases_bool_exp
  ): cases_aggregate!
  dob: date
  firstname: String
  id: Int!
  lastname: String!
  umrn: String!
}

"""
aggregated selection of "patients"
"""
type patients_aggregate {
  aggregate: patients_aggregate_fields
  nodes: [patients!]!
}

"""
aggregate fields of "patients"
"""
type patients_aggregate_fields {
  avg: patients_avg_fields
  count(columns: [patients_select_column!], distinct: Boolean): Int
  max: patients_max_fields
  min: patients_min_fields
  stddev: patients_stddev_fields
  stddev_pop: patients_stddev_pop_fields
  stddev_samp: patients_stddev_samp_fields
  sum: patients_sum_fields
  var_pop: patients_var_pop_fields
  var_samp: patients_var_samp_fields
  variance: patients_variance_fields
}

"""
order by aggregate values of table "patients"
"""
input patients_aggregate_order_by {
  avg: patients_avg_order_by
  count: order_by
  max: patients_max_order_by
  min: patients_min_order_by
  stddev: patients_stddev_order_by
  stddev_pop: patients_stddev_pop_order_by
  stddev_samp: patients_stddev_samp_order_by
  sum: patients_sum_order_by
  var_pop: patients_var_pop_order_by
  var_samp: patients_var_samp_order_by
  variance: patients_variance_order_by
}

"""
input type for inserting array relation for remote table "patients"
"""
input patients_arr_rel_insert_input {
  data: [patients_insert_input!]!
  on_conflict: patients_on_conflict
}

"""aggregate avg on columns"""
type patients_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "patients"
"""
input patients_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "patients". All fields are combined with a logical 'AND'.
"""
input patients_bool_exp {
  _and: [patients_bool_exp]
  _not: patients_bool_exp
  _or: [patients_bool_exp]
  cases: cases_bool_exp
  dob: date_comparison_exp
  firstname: String_comparison_exp
  id: Int_comparison_exp
  lastname: String_comparison_exp
  umrn: String_comparison_exp
}

"""
unique or primary key constraints on table "patients"
"""
enum patients_constraint {
  """unique or primary key constraint"""
  patients_pkey

  """unique or primary key constraint"""
  patients_umrn_key
}

"""
input type for incrementing integer columne in table "patients"
"""
input patients_inc_input {
  id: Int
}

"""
input type for inserting data into table "patients"
"""
input patients_insert_input {
  cases: cases_arr_rel_insert_input
  dob: date
  firstname: String
  id: Int
  lastname: String
  umrn: String
}

"""aggregate max on columns"""
type patients_max_fields {
  dob: date
  firstname: String
  id: Int
  lastname: String
  umrn: String
}

"""
order by max() on columns of table "patients"
"""
input patients_max_order_by {
  dob: order_by
  firstname: order_by
  id: order_by
  lastname: order_by
  umrn: order_by
}

"""aggregate min on columns"""
type patients_min_fields {
  dob: date
  firstname: String
  id: Int
  lastname: String
  umrn: String
}

"""
order by min() on columns of table "patients"
"""
input patients_min_order_by {
  dob: order_by
  firstname: order_by
  id: order_by
  lastname: order_by
  umrn: order_by
}

"""
response of any mutation on the table "patients"
"""
type patients_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [patients!]!
}

"""
input type for inserting object relation for remote table "patients"
"""
input patients_obj_rel_insert_input {
  data: patients_insert_input!
  on_conflict: patients_on_conflict
}

"""
on conflict condition type for table "patients"
"""
input patients_on_conflict {
  constraint: patients_constraint!
  update_columns: [patients_update_column!]!
  where: patients_bool_exp
}

"""
ordering options when selecting data from "patients"
"""
input patients_order_by {
  cases_aggregate: cases_aggregate_order_by
  dob: order_by
  firstname: order_by
  id: order_by
  lastname: order_by
  umrn: order_by
}

"""
select columns of table "patients"
"""
enum patients_select_column {
  """column name"""
  dob

  """column name"""
  firstname

  """column name"""
  id

  """column name"""
  lastname

  """column name"""
  umrn
}

"""
input type for updating data in table "patients"
"""
input patients_set_input {
  dob: date
  firstname: String
  id: Int
  lastname: String
  umrn: String
}

"""aggregate stddev on columns"""
type patients_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "patients"
"""
input patients_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type patients_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "patients"
"""
input patients_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type patients_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "patients"
"""
input patients_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type patients_sum_fields {
  id: Int
}

"""
order by sum() on columns of table "patients"
"""
input patients_sum_order_by {
  id: order_by
}

"""
update columns of table "patients"
"""
enum patients_update_column {
  """column name"""
  dob

  """column name"""
  firstname

  """column name"""
  id

  """column name"""
  lastname

  """column name"""
  umrn
}

"""aggregate var_pop on columns"""
type patients_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "patients"
"""
input patients_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type patients_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "patients"
"""
input patients_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type patients_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "patients"
"""
input patients_variance_order_by {
  id: order_by
}

"""
columns and relationships of "procedures"
"""
type procedures {
  """An array relationship"""
  cases(
    """distinct select on columns"""
    distinct_on: [cases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cases_order_by!]

    """filter the rows returned"""
    where: cases_bool_exp
  ): [cases!]!

  """An aggregated array relationship"""
  cases_aggregate(
    """distinct select on columns"""
    distinct_on: [cases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cases_order_by!]

    """filter the rows returned"""
    where: cases_bool_exp
  ): cases_aggregate!
  group: String
  id: Int!
  text: String!
}

"""
aggregated selection of "procedures"
"""
type procedures_aggregate {
  aggregate: procedures_aggregate_fields
  nodes: [procedures!]!
}

"""
aggregate fields of "procedures"
"""
type procedures_aggregate_fields {
  avg: procedures_avg_fields
  count(columns: [procedures_select_column!], distinct: Boolean): Int
  max: procedures_max_fields
  min: procedures_min_fields
  stddev: procedures_stddev_fields
  stddev_pop: procedures_stddev_pop_fields
  stddev_samp: procedures_stddev_samp_fields
  sum: procedures_sum_fields
  var_pop: procedures_var_pop_fields
  var_samp: procedures_var_samp_fields
  variance: procedures_variance_fields
}

"""
order by aggregate values of table "procedures"
"""
input procedures_aggregate_order_by {
  avg: procedures_avg_order_by
  count: order_by
  max: procedures_max_order_by
  min: procedures_min_order_by
  stddev: procedures_stddev_order_by
  stddev_pop: procedures_stddev_pop_order_by
  stddev_samp: procedures_stddev_samp_order_by
  sum: procedures_sum_order_by
  var_pop: procedures_var_pop_order_by
  var_samp: procedures_var_samp_order_by
  variance: procedures_variance_order_by
}

"""
input type for inserting array relation for remote table "procedures"
"""
input procedures_arr_rel_insert_input {
  data: [procedures_insert_input!]!
  on_conflict: procedures_on_conflict
}

"""aggregate avg on columns"""
type procedures_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "procedures"
"""
input procedures_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "procedures". All fields are combined with a logical 'AND'.
"""
input procedures_bool_exp {
  _and: [procedures_bool_exp]
  _not: procedures_bool_exp
  _or: [procedures_bool_exp]
  cases: cases_bool_exp
  group: String_comparison_exp
  id: Int_comparison_exp
  text: String_comparison_exp
}

"""
unique or primary key constraints on table "procedures"
"""
enum procedures_constraint {
  """unique or primary key constraint"""
  procedures_pkey
}

"""
input type for incrementing integer columne in table "procedures"
"""
input procedures_inc_input {
  id: Int
}

"""
input type for inserting data into table "procedures"
"""
input procedures_insert_input {
  cases: cases_arr_rel_insert_input
  group: String
  id: Int
  text: String
}

"""aggregate max on columns"""
type procedures_max_fields {
  group: String
  id: Int
  text: String
}

"""
order by max() on columns of table "procedures"
"""
input procedures_max_order_by {
  group: order_by
  id: order_by
  text: order_by
}

"""aggregate min on columns"""
type procedures_min_fields {
  group: String
  id: Int
  text: String
}

"""
order by min() on columns of table "procedures"
"""
input procedures_min_order_by {
  group: order_by
  id: order_by
  text: order_by
}

"""
response of any mutation on the table "procedures"
"""
type procedures_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [procedures!]!
}

"""
input type for inserting object relation for remote table "procedures"
"""
input procedures_obj_rel_insert_input {
  data: procedures_insert_input!
  on_conflict: procedures_on_conflict
}

"""
on conflict condition type for table "procedures"
"""
input procedures_on_conflict {
  constraint: procedures_constraint!
  update_columns: [procedures_update_column!]!
  where: procedures_bool_exp
}

"""
ordering options when selecting data from "procedures"
"""
input procedures_order_by {
  cases_aggregate: cases_aggregate_order_by
  group: order_by
  id: order_by
  text: order_by
}

"""
select columns of table "procedures"
"""
enum procedures_select_column {
  """column name"""
  group

  """column name"""
  id

  """column name"""
  text
}

"""
input type for updating data in table "procedures"
"""
input procedures_set_input {
  group: String
  id: Int
  text: String
}

"""aggregate stddev on columns"""
type procedures_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "procedures"
"""
input procedures_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type procedures_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "procedures"
"""
input procedures_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type procedures_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "procedures"
"""
input procedures_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type procedures_sum_fields {
  id: Int
}

"""
order by sum() on columns of table "procedures"
"""
input procedures_sum_order_by {
  id: order_by
}

"""
update columns of table "procedures"
"""
enum procedures_update_column {
  """column name"""
  group

  """column name"""
  id

  """column name"""
  text
}

"""aggregate var_pop on columns"""
type procedures_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "procedures"
"""
input procedures_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type procedures_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "procedures"
"""
input procedures_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type procedures_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "procedures"
"""
input procedures_variance_order_by {
  id: order_by
}

"""query root"""
type query_root {
  """
  fetch data from the table: "access"
  """
  access(
    """distinct select on columns"""
    distinct_on: [access_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [access_order_by!]

    """filter the rows returned"""
    where: access_bool_exp
  ): [access!]!

  """
  fetch aggregated fields from the table: "access"
  """
  access_aggregate(
    """distinct select on columns"""
    distinct_on: [access_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [access_order_by!]

    """filter the rows returned"""
    where: access_bool_exp
  ): access_aggregate!

  """fetch data from the table: "access" using primary key columns"""
  access_by_pk(id: Int!): access

  """
  fetch data from the table: "aneurysm"
  """
  aneurysm(
    """distinct select on columns"""
    distinct_on: [aneurysm_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [aneurysm_order_by!]

    """filter the rows returned"""
    where: aneurysm_bool_exp
  ): [aneurysm!]!

  """
  fetch aggregated fields from the table: "aneurysm"
  """
  aneurysm_aggregate(
    """distinct select on columns"""
    distinct_on: [aneurysm_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [aneurysm_order_by!]

    """filter the rows returned"""
    where: aneurysm_bool_exp
  ): aneurysm_aggregate!

  """fetch data from the table: "aneurysm" using primary key columns"""
  aneurysm_by_pk(id: Int!): aneurysm

  """
  fetch data from the table: "cases"
  """
  cases(
    """distinct select on columns"""
    distinct_on: [cases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cases_order_by!]

    """filter the rows returned"""
    where: cases_bool_exp
  ): [cases!]!

  """
  fetch aggregated fields from the table: "cases"
  """
  cases_aggregate(
    """distinct select on columns"""
    distinct_on: [cases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cases_order_by!]

    """filter the rows returned"""
    where: cases_bool_exp
  ): cases_aggregate!

  """fetch data from the table: "cases" using primary key columns"""
  cases_by_pk(id: Int!): cases

  """
  fetch data from the table: "disease"
  """
  disease(
    """distinct select on columns"""
    distinct_on: [disease_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [disease_order_by!]

    """filter the rows returned"""
    where: disease_bool_exp
  ): [disease!]!

  """
  fetch aggregated fields from the table: "disease"
  """
  disease_aggregate(
    """distinct select on columns"""
    distinct_on: [disease_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [disease_order_by!]

    """filter the rows returned"""
    where: disease_bool_exp
  ): disease_aggregate!

  """fetch data from the table: "disease" using primary key columns"""
  disease_by_pk(id: Int!): disease

  """
  fetch data from the table: "doctors"
  """
  doctors(
    """distinct select on columns"""
    distinct_on: [doctors_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [doctors_order_by!]

    """filter the rows returned"""
    where: doctors_bool_exp
  ): [doctors!]!

  """
  fetch aggregated fields from the table: "doctors"
  """
  doctors_aggregate(
    """distinct select on columns"""
    distinct_on: [doctors_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [doctors_order_by!]

    """filter the rows returned"""
    where: doctors_bool_exp
  ): doctors_aggregate!

  """fetch data from the table: "doctors" using primary key columns"""
  doctors_by_pk(id: Int!): doctors

  """
  fetch data from the table: "names"
  """
  names(
    """distinct select on columns"""
    distinct_on: [names_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [names_order_by!]

    """filter the rows returned"""
    where: names_bool_exp
  ): [names!]!

  """
  fetch aggregated fields from the table: "names"
  """
  names_aggregate(
    """distinct select on columns"""
    distinct_on: [names_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [names_order_by!]

    """filter the rows returned"""
    where: names_bool_exp
  ): names_aggregate!

  """fetch data from the table: "names" using primary key columns"""
  names_by_pk(id: Int!): names

  """
  fetch data from the table: "operations"
  """
  operations(
    """distinct select on columns"""
    distinct_on: [operations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [operations_order_by!]

    """filter the rows returned"""
    where: operations_bool_exp
  ): [operations!]!

  """
  fetch aggregated fields from the table: "operations"
  """
  operations_aggregate(
    """distinct select on columns"""
    distinct_on: [operations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [operations_order_by!]

    """filter the rows returned"""
    where: operations_bool_exp
  ): operations_aggregate!

  """fetch data from the table: "operations" using primary key columns"""
  operations_by_pk(id: Int!): operations

  """
  fetch data from the table: "patients"
  """
  patients(
    """distinct select on columns"""
    distinct_on: [patients_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [patients_order_by!]

    """filter the rows returned"""
    where: patients_bool_exp
  ): [patients!]!

  """
  fetch aggregated fields from the table: "patients"
  """
  patients_aggregate(
    """distinct select on columns"""
    distinct_on: [patients_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [patients_order_by!]

    """filter the rows returned"""
    where: patients_bool_exp
  ): patients_aggregate!

  """fetch data from the table: "patients" using primary key columns"""
  patients_by_pk(id: Int!): patients

  """
  fetch data from the table: "procedures"
  """
  procedures(
    """distinct select on columns"""
    distinct_on: [procedures_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [procedures_order_by!]

    """filter the rows returned"""
    where: procedures_bool_exp
  ): [procedures!]!

  """
  fetch aggregated fields from the table: "procedures"
  """
  procedures_aggregate(
    """distinct select on columns"""
    distinct_on: [procedures_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [procedures_order_by!]

    """filter the rows returned"""
    where: procedures_bool_exp
  ): procedures_aggregate!

  """fetch data from the table: "procedures" using primary key columns"""
  procedures_by_pk(id: Int!): procedures
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "access"
  """
  access(
    """distinct select on columns"""
    distinct_on: [access_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [access_order_by!]

    """filter the rows returned"""
    where: access_bool_exp
  ): [access!]!

  """
  fetch aggregated fields from the table: "access"
  """
  access_aggregate(
    """distinct select on columns"""
    distinct_on: [access_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [access_order_by!]

    """filter the rows returned"""
    where: access_bool_exp
  ): access_aggregate!

  """fetch data from the table: "access" using primary key columns"""
  access_by_pk(id: Int!): access

  """
  fetch data from the table: "aneurysm"
  """
  aneurysm(
    """distinct select on columns"""
    distinct_on: [aneurysm_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [aneurysm_order_by!]

    """filter the rows returned"""
    where: aneurysm_bool_exp
  ): [aneurysm!]!

  """
  fetch aggregated fields from the table: "aneurysm"
  """
  aneurysm_aggregate(
    """distinct select on columns"""
    distinct_on: [aneurysm_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [aneurysm_order_by!]

    """filter the rows returned"""
    where: aneurysm_bool_exp
  ): aneurysm_aggregate!

  """fetch data from the table: "aneurysm" using primary key columns"""
  aneurysm_by_pk(id: Int!): aneurysm

  """
  fetch data from the table: "cases"
  """
  cases(
    """distinct select on columns"""
    distinct_on: [cases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cases_order_by!]

    """filter the rows returned"""
    where: cases_bool_exp
  ): [cases!]!

  """
  fetch aggregated fields from the table: "cases"
  """
  cases_aggregate(
    """distinct select on columns"""
    distinct_on: [cases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cases_order_by!]

    """filter the rows returned"""
    where: cases_bool_exp
  ): cases_aggregate!

  """fetch data from the table: "cases" using primary key columns"""
  cases_by_pk(id: Int!): cases

  """
  fetch data from the table: "disease"
  """
  disease(
    """distinct select on columns"""
    distinct_on: [disease_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [disease_order_by!]

    """filter the rows returned"""
    where: disease_bool_exp
  ): [disease!]!

  """
  fetch aggregated fields from the table: "disease"
  """
  disease_aggregate(
    """distinct select on columns"""
    distinct_on: [disease_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [disease_order_by!]

    """filter the rows returned"""
    where: disease_bool_exp
  ): disease_aggregate!

  """fetch data from the table: "disease" using primary key columns"""
  disease_by_pk(id: Int!): disease

  """
  fetch data from the table: "doctors"
  """
  doctors(
    """distinct select on columns"""
    distinct_on: [doctors_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [doctors_order_by!]

    """filter the rows returned"""
    where: doctors_bool_exp
  ): [doctors!]!

  """
  fetch aggregated fields from the table: "doctors"
  """
  doctors_aggregate(
    """distinct select on columns"""
    distinct_on: [doctors_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [doctors_order_by!]

    """filter the rows returned"""
    where: doctors_bool_exp
  ): doctors_aggregate!

  """fetch data from the table: "doctors" using primary key columns"""
  doctors_by_pk(id: Int!): doctors

  """
  fetch data from the table: "names"
  """
  names(
    """distinct select on columns"""
    distinct_on: [names_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [names_order_by!]

    """filter the rows returned"""
    where: names_bool_exp
  ): [names!]!

  """
  fetch aggregated fields from the table: "names"
  """
  names_aggregate(
    """distinct select on columns"""
    distinct_on: [names_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [names_order_by!]

    """filter the rows returned"""
    where: names_bool_exp
  ): names_aggregate!

  """fetch data from the table: "names" using primary key columns"""
  names_by_pk(id: Int!): names

  """
  fetch data from the table: "operations"
  """
  operations(
    """distinct select on columns"""
    distinct_on: [operations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [operations_order_by!]

    """filter the rows returned"""
    where: operations_bool_exp
  ): [operations!]!

  """
  fetch aggregated fields from the table: "operations"
  """
  operations_aggregate(
    """distinct select on columns"""
    distinct_on: [operations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [operations_order_by!]

    """filter the rows returned"""
    where: operations_bool_exp
  ): operations_aggregate!

  """fetch data from the table: "operations" using primary key columns"""
  operations_by_pk(id: Int!): operations

  """
  fetch data from the table: "patients"
  """
  patients(
    """distinct select on columns"""
    distinct_on: [patients_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [patients_order_by!]

    """filter the rows returned"""
    where: patients_bool_exp
  ): [patients!]!

  """
  fetch aggregated fields from the table: "patients"
  """
  patients_aggregate(
    """distinct select on columns"""
    distinct_on: [patients_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [patients_order_by!]

    """filter the rows returned"""
    where: patients_bool_exp
  ): patients_aggregate!

  """fetch data from the table: "patients" using primary key columns"""
  patients_by_pk(id: Int!): patients

  """
  fetch data from the table: "procedures"
  """
  procedures(
    """distinct select on columns"""
    distinct_on: [procedures_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [procedures_order_by!]

    """filter the rows returned"""
    where: procedures_bool_exp
  ): [procedures!]!

  """
  fetch aggregated fields from the table: "procedures"
  """
  procedures_aggregate(
    """distinct select on columns"""
    distinct_on: [procedures_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [procedures_order_by!]

    """filter the rows returned"""
    where: procedures_bool_exp
  ): procedures_aggregate!

  """fetch data from the table: "procedures" using primary key columns"""
  procedures_by_pk(id: Int!): procedures
}

scalar timestamp

"""
expression to compare columns of type timestamp. All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}
